################################################################################
# Copyright (c) 2016 Genome Research Ltd. 
# 
# Author: George Hall <gh10@sanger.ac.uk> 
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################################################


# This script uses usage messages to compute all Samtools subcommands and their
# corresponding options, and then prints a file allowing for tab completion of
# these subcommands and their options to stdout. The user must then source this
# file from their .bashrc.

# Usage:
# Step 1: Check SAMTOOLS_BIN is correctly set
# Step 2: $ sh generate_completion_file.sh > /where/to/save/completion/file
# Step 3: Source completion file (probably want to add it to be sourced from .bashrc)


# The completion file generated will only work for this binary, change if necessary:
SAMTOOLS_BIN="samtools"

# Get subcommands:

SUBCOMMANDS=$($SAMTOOLS_BIN 2>&1 | \
	awk '{if ($1 != "" && \
	$1 != "Program:" && \
	$1 != "Usage:" && \
	$1 != "Version:" && \
	$1 != "Commands:" && \
	$1 != "--") print $1}' | \
	xargs -n 1 -I @ printf @" ")

SAMTOOLS_VERSION=$(samtools 2>&1 | grep "Version: [[:graph:]]*" | awk '{print $2}')
printf "# Generated by $0 using Samtools version $SAMTOOLS_VERSION\n\n"

printf "# All subcommands can be tab completed, and those with long options can be tab completed\n"
printf "# once the first '-' has been provided. Otherwise, it is assumed that the user is trying\n"
printf "# to tab complete filenames.\n\n"

printf "# This file must be sourced for the tab completions to work\n\n"

printf "_samtools_options()\n"
printf "{\n"
printf "\tlocal cur current_sub opts\n"
printf "\tCOMPREPLY=()\n"
printf "\tcur=\"\${COMP_WORDS[COMP_CWORD]}\"\n\n"

printf "\tif [[ \$COMP_CWORD == 1 ]] ; then\n"
printf "\t\t# Complete main subcommand\n"
printf "\t\topts=\"$SUBCOMMANDS\"\n\n"

printf "\t\tCOMPREPLY=(\$(compgen -W \"\${opts}\" -- \${cur}))\n"
printf "\t\treturn 0\n\n"

printf "\telse\n"
printf "\t\t# Complete options for subcommands\n\n"
printf "\t\tcurrent_sub=\"\${COMP_WORDS[1]}\"\n\n"

printf "\t\tcase \$current_sub in\n\n"

for SUB in $SUBCOMMANDS; do

	# This matches with two double dashed (i.e. a long option) followed by alphanums
	# or dashes. The reason I couldn't use [[:graph:]] is that it could include commas,
	# which are used to separate the short version of long options, which start with
	# double dashes when they are >= 2 chars long.
	SUB_OPTS=$($SAMTOOLS_BIN $SUB 2>&1 | \
		grep -oh "\(\-\-\)\([[:alnum:]]\|\-\)* " | \
		xargs -I @ printf @)

	# Only print options when option list is non-empty
	OPTS_LEN=${#SUB_OPTS}
	if [ $OPTS_LEN != 0 ]; then
		printf "\t\t\t\"$SUB\")\n"
		printf "\t\t\t\t# Completion for $SUB - only triggered after first '-'\n"
		printf "\t\t\t\tif [[ \${cur} == -* ]] ; then\n"
		printf "\t\t\t\t\topts=\"$SUB_OPTS\"\n\n"
		printf "\t\t\t\t\tCOMPREPLY=(\$(compgen -W \"\${opts}\" -- \${cur}))\n"
		printf "\t\t\t\t\treturn 0\n"
		printf "\t\t\t\tfi\n"
		printf "\t\t\t\t;;\n\n"
	fi
done

printf "\t\t\t*)\n"
printf "\t\t\t\t;;\n\n"
printf "\t\tesac\n\n"

printf "\tfi\n\n"

printf "\t# If we have not returned by now, assume the user is looking for files\n"
printf "\tcompopt -o filenames # Don't append a space\n"
printf "\tCOMPREPLY=(\$(compgen -f \"\${cur}\"))\n"
printf "\treturn 0\n"
printf "}\n"
printf "complete -F _samtools_options $SAMTOOLS_BIN\n"
